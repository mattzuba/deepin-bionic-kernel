#!/bin/bash

BASE_DIR=/var/local/bionic-kernel

create_sources() {
    printf "## This file is automatically generated, DO NOT EDIT\ndeb file:$1 ./" > /etc/apt/sources.list.d/bionic-kernel.list
}

get_version() {
    local PACKAGE=$1
    local MAINT=$2
    apt-cache show ${PACKAGE} | grep -B6 "Maintainer: ${MAINT}" | grep -oP '(?<=Version: ).*'
}

get_depends() {
    local PACKAGE=$1
    local EXCLUDE=$2
    local LATEST_DEPENDS=$(apt-cache show ${PACKAGE} | grep -A6 "Maintainer: Ubuntu" | grep -oP '(?<=Depends: ).*')
    local DEPENDS=
    local OLD_IFS=$IFS
    local IFS=', '
    for DEP in $LATEST_DEPENDS; do
        if [[ ${EXCLUDE} == "" ]] || echo $DEP | grep -qvP $EXCLUDE; then
            DEPENDS="${DEPENDS}, ${DEP}"
        fi
    done
    IFS=$OLD_IFS
    DEPENDS=${DEPENDS#", "}

    echo -n $DEPENDS
}

make_equiv() {
    local PACKAGE=$1
    local EXCLUDE=$2

    # Get the most recent kernel version
    LATEST_VERSION=$(get_version ${PACKAGE} Ubuntu)
    if [[ -z $LATEST_VERSION ]]; then
        echo "Ubuntu ${PACKAGE} package not found"
        return 1
    fi
    
    CURRENT_VERSION=$(get_version ${PACKAGE} Local)
    if [[ ! -z $CURRENT_VERSION ]] && ! dpkg --compare-versions $LATEST_VERSION gt $CURRENT_VERSION; then
        echo "Not updating ${PACKAGE}, already latest version (${LATEST_VERSION})"
        return 1
    fi

    echo "Creating ${PACKAGE}:${LATEST_VERSION}"

    DEPENDS=$(get_depends ${PACKAGE} ${EXCLUDE})
    
    cat > ${PACKAGE} <<EOF
Section: kernel
Priority: optional
Standards-Version: 3.9.2

Package: ${PACKAGE}
Version: ${LATEST_VERSION}
Maintainer: Local <root@localhost>
Depends: ${DEPENDS}
Architecture: amd64
Description: Installs ${PACKAGE} Ubuntu Bionic package in Deepin
EOF

    equivs-build ${PACKAGE}
    rm ${PACKAGE}
}

make_release() {
    # Scan the packages
    dpkg-scanpackages -m -a amd64 . > Packages
    gzip --keep --force -9 Packages
    
    cat > Release <<EOF
Origin: Bionic Kernel
Label: Bionic Kernel
Suite: bionic-kernel
Architectures: amd64
Components: main
Description: Bionic Kernel for Deepin
EOF

    echo -e "Date: `LANG=C date -Ru`" >> Release
    
    # Release must contain MD5 sums of all repository files (in a simple repo just the Packages and Packages.gz files)
    echo -e 'MD5Sum:' >> Release
    printf ' '$(md5sum Packages.gz | cut --delimiter=' ' --fields=1)' %16d Packages.gz' $(wc --bytes Packages.gz | cut --delimiter=' ' --fields=1) >> Release
    printf '\n '$(md5sum Packages | cut --delimiter=' ' --fields=1)' %16d Packages' $(wc --bytes Packages | cut --delimiter=' ' --fields=1) >> Release
    
    # Release must contain SHA256 sums of all repository files (in a simple repo just the Packages and Packages.gz files)
    echo -e '\nSHA256:' >> Release
    printf ' '$(sha256sum Packages.gz | cut --delimiter=' ' --fields=1)' %16d Packages.gz' $(wc --bytes Packages.gz | cut --delimiter=' ' --fields=1) >> Release
    printf '\n '$(sha256sum Packages | cut --delimiter=' ' --fields=1)' %16d Packages' $(wc --bytes Packages | cut --delimiter=' ' --fields=1) >> Release
    
    gpg --homedir ${BASE_DIR}/.gnupg --clearsign --digest-algo SHA512 --local-user root@localhost -o InRelease --yes Release
    rm Release
}

main() {
    apt update

    create_sources $BASE_DIR
    
    pushd ${BASE_DIR}
    
    make_equiv linux-image-generic linux-firmware
    make_equiv linux-headers-generic
    make_equiv linux-image-generic-hwe-18.04 linux-firmware
    make_equiv linux-headers-generic-hwe-18.04
    
    make_release
    
    popd

    apt update
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
